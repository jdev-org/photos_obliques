<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
						 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd 
						 http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd 
						 http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
						 http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
						 http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />

	<context:component-scan base-package="org.georchestra.photooblique" />
	
	<tx:annotation-driven />
	
	<jpa:repositories base-package="org.georchestra.photooblique.repository" />

	<!-- Only to load default_schema name in hibernate connection -->
	<bean id="cadastrappProperties"
		class="org.georchestra.photooblique.configuration.POPlaceHolder">
		<property name="locations">
			<list>
				<value>classpath:photooblique.properties</value>
				<value>file:#{systemProperties['georchestra.datadir']}/photooblique/photoblique.properties
				</value>
			</list>
		</property>
		<property name="fileEncoding" value="UTF-8" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="ignoreResourceNotFound" value="true" />
	</bean>

	<jaxrs:server id="services" address="/">
		<jaxrs:serviceBeans>
			<bean class="org.georchestra.photooblique.service.CommuneController" />
			<bean class="org.georchestra.photooblique.service.POController" />
			<bean class="org.georchestra.photooblique.service.ExportController" />
		</jaxrs:serviceBeans>
		
		<jaxrs:providers>
			<bean class="org.codehaus.jackson.jaxrs.JacksonJsonProvider" />
			<!-- Use to add context in logg and can be use for autorization filtering -->
			<bean class="org.georchestra.photooblique.providers.PreRequestFilter" />
			<bean class="org.georchestra.photooblique.providers.PreReponseFilter" />
		</jaxrs:providers>
	</jaxrs:server>

	<!-- DataSource information using jndi, this datasource is used directly 
		via JDBCTemplate and via Spring repository -->
	<bean id="dbDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/photooblique" />
	</bean>

	<!-- ============================= -->
	<!-- ENTITY MANAGER -->
	<!-- ============================= -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dbDataSource" />
		<property name="persistenceUnitName" value="springDataJPA" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>

				<!-- get schema name for cadastrapp.properties -->
				<prop key="hibernate.default_schema">${schema.name}</prop>

				<!-- dialect -->
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
				<prop key="hibernate.connection.useUnicode">true</prop>
				<prop key="hibernate.connection.charSet">UTF-8</prop>

				<!-- 2d level cache -->
				<prop key="hibernate.cache.use_query_cache">false</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>

				<!-- ehcache -->
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory
				</prop>

				<prop key="hibernate.bytecode.use_reflection_optimizer">true</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">true</prop>
				<prop key="hibernate.jdbc.use_streams_for_binary">true</prop>
				<prop key="hibernate.jdbc.fetch_size">16</prop>

				<!-- logging debug information, change this to debug -->
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.generate_statistics">false</prop>
				<prop key="hibernate.use_sql_comments">false</prop>
				<prop key="hibernate.hbm2ddl.auto">validate</prop>

			</props>
		</property>
	</bean>

	<!-- ============================= -->
	<!-- TRANSACTION MANAGER -->
	<!-- ============================= -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- ============================= -->
	<!-- SESSION FACTORY -->
	<!-- ============================= -->
	<bean id="sessionFactory" factory-bean="entityManagerFactory"
		factory-method="getSessionFactory" />


</beans>